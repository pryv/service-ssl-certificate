
upstream core_server {
  server core:3000 max_fails=3 fail_timeout=30s;
  server core:3001 max_fails=3 fail_timeout=30s;
  server core:3002 max_fails=3 fail_timeout=30s;
  server core:3003 max_fails=3 fail_timeout=30s;
  server core:3004 max_fails=3 fail_timeout=30s;
  server core:3005 max_fails=3 fail_timeout=30s;
}

upstream mfa_server {
  server mfa:7000 max_fails=3 fail_timeout=30s;
}

upstream websocket_server {
  ip_hash;
  server core:3000 max_fails=3 fail_timeout=30s;
  server core:3001 max_fails=3 fail_timeout=30s;
  server core:3002 max_fails=3 fail_timeout=30s;
  server core:3003 max_fails=3 fail_timeout=30s;
  server core:3004 max_fails=3 fail_timeout=30s;
  server core:3005 max_fails=3 fail_timeout=30s;
}

upstream hfs_server {
  server hfs:3000 max_fails=3 fail_timeout=30s;
  server hfs:3001 max_fails=3 fail_timeout=30s;
  server hfs:3002 max_fails=3 fail_timeout=30s;
  server hfs:3003 max_fails=3 fail_timeout=30s;
  server hfs:3004 max_fails=3 fail_timeout=30s;
  server hfs:3005 max_fails=3 fail_timeout=30s;
}

upstream condensate_server {
  server condensate:9000;
}

upstream preview_server {
  server preview:9000 max_fails=3 fail_timeout=30s;
}

upstream follower_server {
  server config-follower:6000 max_fails=3 fail_timeout=30s;
}

# API (Core)
server {
  listen                443 ssl;
  server_name           *.DOMAIN;

  access_log /app/log/core.log default;
  access_log /app/log/json_access.log json_analytics;

  client_max_body_size  20M;
  
  ### Proxy options (has to be within server definition to be effective)
  # This enables websocket support
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection "upgrade";
  proxy_set_header X-Real-IP  $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto https;
  proxy_redirect off;
  # Buffering
  proxy_buffering off;
  proxy_buffers 16 8k;
  # User information will be in the host, so proxy that as well.
  set $my_host      $http_host;
  proxy_set_header  Host $my_host;

  # Config-follower
  location /notify {
    proxy_pass http://follower_server;
  }

  location / {
    proxy_pass http://core_server;
  }

  # MFA
  location /auth/login {
    proxy_pass http://mfa_server/login;
  }

  location /mfa/ {
    proxy_pass http://mfa_server/mfa/;
  }
  
  # Preview server:
  location /previews/ {
    proxy_pass http://preview_server/;    
  }
  
  # Redirect HF calls to hfs_server:
  location ~* /events/[^/]+/series$ {
    proxy_pass http://hfs_server;    
  }
  location ~* /series/batch$ {
    proxy_pass http://hfs_server;    
  }

  # Socket.IO / Websockets: Handshakes will be done against a specific backend
  # process and will not be valid on other backend processes. We cannot load 
  # balance this the same way as other calls. 
  location /socket.io/ {
    
    proxy_pass http://websocket_server;
  }

  # Matches urls that in the browser look like this: /#/...
  #
  location = / {
    if ($request_method = GET) {
      set $my_host 'pryv.github.io';
    }
    
    proxy_pass https://pryv.github.io/app-web/;
    proxy_set_header  Host $my_host;

    # Allow other methods to reach the core.
    limit_except GET {
      proxy_pass http://core_server;
    }
  }

  location = /xevents {
    proxy_pass http://condensate_server/xevents/;
  }
}
